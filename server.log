warning: unused import: `super::EntityType`
 --> src/entities/note_links.rs:8:5
  |
8 | use super::EntityType;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `t_type`
  --> src/entities/note_links.rs:86:17
   |
86 |     if let Some(t_type) = target_type {
   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_t_type`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `project_id`
   --> src/entities/note_links.rs:358:56
    |
358 | pub async fn detect_potential_links(pool: &SqlitePool, project_id: &str, content: &str) -> Result<Vec<DetectedLink>> {
    |                                                        ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project_id`

warning: unused variable: `t_type`
   --> src/entities/note_links.rs:240:17
    |
240 |     if let Some(t_type) = target_type {
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_t_type`

warning: unused variable: `state`
    --> src/mcp_server.rs:1514:11
     |
1514 |     State(state): State<McpServerState>,
     |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
    --> src/mcp_server.rs:1742:11
     |
1742 |     State(state): State<McpServerState>,
     |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
    --> src/mcp_server.rs:1759:11
     |
1759 |     State(state): State<McpServerState>,
     |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `e`
    --> src/mcp_server.rs:1772:13
     |
1772 |         Err(e) => {
     |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: variable does not need to be mutable
   --> src/entities/validation.rs:260:13
    |
260 |         let mut warnings = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `entity`
   --> src/entities/validation.rs:434:24
    |
434 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:445:24
    |
445 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:456:24
    |
456 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:467:24
    |
467 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:478:24
    |
478 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:489:24
    |
489 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:500:24
    |
500 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:511:24
    |
511 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entity`
   --> src/entities/validation.rs:522:24
    |
522 |     fn validate(&self, entity: &dyn Entity, _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: unused variable: `entities`
   --> src/entities/validation.rs:533:24
    |
533 |     fn validate(&self, entities: &[&dyn Entity], _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `entities`
   --> src/entities/validation.rs:543:24
    |
543 |     fn validate(&self, entities: &[&dyn Entity], _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: unused variable: `entities`
   --> src/entities/validation.rs:553:24
    |
553 |     fn validate(&self, entities: &[&dyn Entity], _context: &ValidationContext) -> Result<Vec<ValidationError>> {
    |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entities`

warning: methods `generate_features_md`, `generate_template_features`, `generate_directives_md`, and `generate_progress_md` are never used
    --> src/mcp_protocol.rs:1527:8
     |
102  | impl McpProtocolHandler {
     | ----------------------- methods in this implementation
...
1527 |     fn generate_features_md(&self, name: &str, template_type: &str, initialize_features: bool) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^
...
1563 |     fn generate_template_features(&self, template_type: &str) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1597 |     fn generate_directives_md(&self) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1639 |     fn generate_progress_md(&self, name: &str) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: `workspace` (lib) generated 22 warnings (run `cargo fix --lib -p workspace` to apply 2 suggestions)
warning: unused variable: `entity_manager`
    --> src/bin/ws.rs:1759:21
     |
1759 |                 let entity_manager = workspace::entities::EntityManager::new(pool);
     |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_manager`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `relationship_type`
    --> src/bin/ws.rs:6929:70
     |
6929 | ...ity_type: String, relationship_type: Option<String>, include_resolved: bool) -> Result<()> {
     |                      ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_relationship_type`

warning: unused variable: `include_resolved`
    --> src/bin/ws.rs:6929:105
     |
6929 | ...e: Option<String>, include_resolved: bool) -> Result<()> {
     |                       ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_include_resolved`

warning: unused variable: `tags`
    --> src/bin/ws.rs:7094:111
     |
7094 | ...nt: String, note_type: String, tags: Option<String>) -> Result<()> {
     |                                   ^^^^ help: if this is intentional, prefix it with an underscore: `_tags`

warning: unused variable: `entity_manager`
    --> src/bin/ws.rs:7099:13
     |
7099 |         let entity_manager = workspace::entities::EntityManager::new(pool.clone());
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_manager`

warning: unused variable: `tags`
    --> src/bin/ws.rs:7121:72
     |
7121 | fn add_project_note(title: String, content: String, note_type: String, tags: Option<String>) -> Result<()> {
     |                                                                        ^^^^ help: if this is intentional, prefix it with an underscore: `_tags`

warning: unused variable: `entity_type`
    --> src/bin/ws.rs:7146:15
     |
7146 | fn list_notes(entity_type: Option<String>, entity_id: Option<String>, note_type: Option<String>, project_wide: bool, pinned: bool) -> Res...
     |               ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity_type`

warning: unused variable: `note_type`
    --> src/bin/ws.rs:7146:71
     |
7146 | ...ntity_id: Option<String>, note_type: Option<String>, project_wide: bool, pinned: bool) -> Result<()> {
     |                              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_note_type`

warning: unused variable: `pinned`
    --> src/bin/ws.rs:7146:118
     |
7146 | ...String>, project_wide: bool, pinned: bool) -> Result<()> {
     |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_pinned`

warning: function `create_sample_project` is never used
    --> src/bin/ws.rs:1811:4
     |
1811 | fn create_sample_project(force: bool) -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(dead_code)]` on by default

warning: function `populate_sample_data` is never used
    --> src/bin/ws.rs:1938:4
     |
1938 | fn populate_sample_data(force: bool) -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^^

warning: function `populate_sample_data_async` is never used
    --> src/bin/ws.rs:1967:10
     |
1967 | async fn populate_sample_data_async(force: bool) -> Result<()> {
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `add_task` is never used
    --> src/bin/ws.rs:3917:4
     |
3917 | fn add_task(title: String, description: String, feature: Option<String>, priority: String, auto_feature: bool) -> Result<()> {
     |    ^^^^^^^^

warning: function `detect_feature_from_description` is never used
    --> src/bin/ws.rs:3960:4
     |
3960 | fn detect_feature_from_description(description: &str) -> Option<String> {
     |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `save_task_to_backlog` is never used
    --> src/bin/ws.rs:3985:4
     |
3985 | fn save_task_to_backlog(task: &Task) -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^^

warning: function `create_initial_task_backlog` is never used
    --> src/bin/ws.rs:4021:4
     |
4021 | fn create_initial_task_backlog() -> String {
     |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `add_feature_to_file` is never used
    --> src/bin/ws.rs:5145:4
     |
5145 | fn add_feature_to_file(title: String, description: String, category: String, state: String) -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^

warning: function `get_next_feature_id` is never used
    --> src/bin/ws.rs:5318:4
     |
5318 | fn get_next_feature_id(features_content: &str) -> String {
     |    ^^^^^^^^^^^^^^^^^^^

warning: function `add_feature_to_features_file` is never used
    --> src/bin/ws.rs:5335:4
     |
5335 | fn add_feature_to_features_file(id: &str, title: &str, description: &str, state: &str, category: &str) -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `check_context_threshold_startup` is never used
    --> src/bin/ws.rs:5551:4
     |
5551 | fn check_context_threshold_startup() -> Result<()> {
     |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `workspace` (bin "ws") generated 20 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.40s
     Running `target/debug/ws mcp-server --port 3003`
# To enable ws completions for this session, run:
fpath=("/Users/bahram/.local/share/zsh/site-functions" $fpath)
autoload -U compinit && compinit
# To enable permanently, add the above lines to your ~/.zshrc
